// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateInstallation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Installation {
  id: ID!
  access_token: String!
  scope: String!
  user_id: String!
  team_name: String!
  team_id: String!
}

type InstallationConnection {
  pageInfo: PageInfo!
  edges: [InstallationEdge]!
  aggregate: AggregateInstallation!
}

input InstallationCreateInput {
  id: ID
  access_token: String!
  scope: String!
  user_id: String!
  team_name: String!
  team_id: String!
}

type InstallationEdge {
  node: Installation!
  cursor: String!
}

enum InstallationOrderByInput {
  id_ASC
  id_DESC
  access_token_ASC
  access_token_DESC
  scope_ASC
  scope_DESC
  user_id_ASC
  user_id_DESC
  team_name_ASC
  team_name_DESC
  team_id_ASC
  team_id_DESC
}

type InstallationPreviousValues {
  id: ID!
  access_token: String!
  scope: String!
  user_id: String!
  team_name: String!
  team_id: String!
}

type InstallationSubscriptionPayload {
  mutation: MutationType!
  node: Installation
  updatedFields: [String!]
  previousValues: InstallationPreviousValues
}

input InstallationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InstallationWhereInput
  AND: [InstallationSubscriptionWhereInput!]
  OR: [InstallationSubscriptionWhereInput!]
  NOT: [InstallationSubscriptionWhereInput!]
}

input InstallationUpdateInput {
  access_token: String
  scope: String
  user_id: String
  team_name: String
  team_id: String
}

input InstallationUpdateManyMutationInput {
  access_token: String
  scope: String
  user_id: String
  team_name: String
  team_id: String
}

input InstallationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  access_token: String
  access_token_not: String
  access_token_in: [String!]
  access_token_not_in: [String!]
  access_token_lt: String
  access_token_lte: String
  access_token_gt: String
  access_token_gte: String
  access_token_contains: String
  access_token_not_contains: String
  access_token_starts_with: String
  access_token_not_starts_with: String
  access_token_ends_with: String
  access_token_not_ends_with: String
  scope: String
  scope_not: String
  scope_in: [String!]
  scope_not_in: [String!]
  scope_lt: String
  scope_lte: String
  scope_gt: String
  scope_gte: String
  scope_contains: String
  scope_not_contains: String
  scope_starts_with: String
  scope_not_starts_with: String
  scope_ends_with: String
  scope_not_ends_with: String
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  team_name: String
  team_name_not: String
  team_name_in: [String!]
  team_name_not_in: [String!]
  team_name_lt: String
  team_name_lte: String
  team_name_gt: String
  team_name_gte: String
  team_name_contains: String
  team_name_not_contains: String
  team_name_starts_with: String
  team_name_not_starts_with: String
  team_name_ends_with: String
  team_name_not_ends_with: String
  team_id: String
  team_id_not: String
  team_id_in: [String!]
  team_id_not_in: [String!]
  team_id_lt: String
  team_id_lte: String
  team_id_gt: String
  team_id_gte: String
  team_id_contains: String
  team_id_not_contains: String
  team_id_starts_with: String
  team_id_not_starts_with: String
  team_id_ends_with: String
  team_id_not_ends_with: String
  AND: [InstallationWhereInput!]
  OR: [InstallationWhereInput!]
  NOT: [InstallationWhereInput!]
}

input InstallationWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createInstallation(data: InstallationCreateInput!): Installation!
  updateInstallation(data: InstallationUpdateInput!, where: InstallationWhereUniqueInput!): Installation
  updateManyInstallations(data: InstallationUpdateManyMutationInput!, where: InstallationWhereInput): BatchPayload!
  upsertInstallation(where: InstallationWhereUniqueInput!, create: InstallationCreateInput!, update: InstallationUpdateInput!): Installation!
  deleteInstallation(where: InstallationWhereUniqueInput!): Installation
  deleteManyInstallations(where: InstallationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  installation(where: InstallationWhereUniqueInput!): Installation
  installations(where: InstallationWhereInput, orderBy: InstallationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Installation]!
  installationsConnection(where: InstallationWhereInput, orderBy: InstallationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstallationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  installation(where: InstallationSubscriptionWhereInput): InstallationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  user_id: String!
  team_id: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  user_id: String!
  team_id: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  team_id_ASC
  team_id_DESC
}

type UserPreviousValues {
  id: ID!
  user_id: String!
  team_id: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  user_id: String
  team_id: String
}

input UserUpdateManyMutationInput {
  user_id: String
  team_id: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  team_id: String
  team_id_not: String
  team_id_in: [String!]
  team_id_not_in: [String!]
  team_id_lt: String
  team_id_lte: String
  team_id_gt: String
  team_id_gte: String
  team_id_contains: String
  team_id_not_contains: String
  team_id_starts_with: String
  team_id_not_starts_with: String
  team_id_ends_with: String
  team_id_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`